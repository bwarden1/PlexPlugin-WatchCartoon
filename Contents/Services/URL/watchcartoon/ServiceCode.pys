import urllib2

# I know, bad things happen when using the library directly.  There are multiple redirects.  Let's get the last one.

######################################################################################

BASE_URL = 'https://www.watchcartoononline.io/'

######################################################################################
# Removes weird Characters from string
def FixString(str):
    str = str.encode('ascii', 'xmlcharrefreplace')
    str = String.Unquote(str)
    str = str.replace("&amp;","&")
    str = str.replace("&#8211;","–")
    str = str.replace("&#8217;","'")
    return str

######################################################################################
# Pulls show name from show_url to add to show_title

def MetadataObjectForURL(url):
    page_data = HTML.ElementFromURL(url)
    try:
        show_title = page_data.xpath("//title/text()")[0]
        show_title = show_title.replace("| Watch cartoons online, Watch anime online, English dub anime","")
    except:
        show_title = "???"

    try: 
        show_desc = FixString(page_data.xpath("//meta[@name='description']/@content")[0])
        show_sum = HTML.StringFromElement(page_data.xpath("//div[@class='iltext']/p")[0])
        show_sum = String.StripTags(show_sum)
        show_sum = show_sum.splitlines()[0]
        show_sum = FixString(show_sum)
        show_sum = show_sum.replace(show_desc,"")
    except:
        show_sum = "???"

    try:
        show_thumb = page_data.xpath("//link[@rel='image_src']/@href")[0]
        return EpisodeObject(
            title = show_title,
            summary = show_sum,
            thumb = show_thumb
            )
    except:
        return EpisodeObject(
            title = show_title,
            summary = show_sum
            )
        

################################################################################
# All videos vary in codec and must be transcoded.
def MediaObjectsForURL(url):
    Log("MediaObjectsForURL: " + url)

    return [MediaObject(
        audio_codec = AudioCodec.AAC,
        video_codec = VideoCodec.H264,
        parts = [PartObject(key=Callback(playVideoUrlFromIframe, url = url))]
    )]

######################################################################################
# Builds list of streams and plays using index from url

def playVideoUrlFromIframe(url):
    Log("playVideoUrlFromIframe")
    page_data = HTML.ElementFromURL(url)
    iframes = page_data.xpath("//iframe[contains(@id,'uploads')]/@src")

    for iframe_url in iframes:
        if iframe_url.find("embed.php") > 0:
            Log("Found new-style iFrame URL: " + str(iframe_url))

            iframe_data = HTTP.Request(iframe_url).content

            video_url = ""
            video_url_json_start_index = iframe_data.find('file: "http')

            if video_url_json_start_index > -1:
                # Offset the 'file: "' bit.
                video_url_json_start_index += 7
                Log("Found at position: " + str(video_url_json_start_index))

                # Find the end of the JSON string...
                video_url_json_end_index = iframe_data.find('"', video_url_json_start_index)
                Log("End position is: " + str(video_url_json_end_index))

                video_url = iframe_data[video_url_json_start_index:video_url_json_end_index]

                Log("Video URL is " + video_url)
                return Redirect(video_url)

    return None